---------Context------------------

def explore(grid, row, col, visited):
    if (row, col) in visited or row not in range(len(grid)) or col not in range(len(grid[0])) or grid[row][col] == 0:
        return
    visited.add((row, col))
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]
    for dr, dc in directions:
        explore(grid, row + dr, col + dc, visited)

def count_islands(grid):
    pass

def is_valid(grid, row, col):
    return 0 <= row < len(grid) and 0 <= col < len(grid[0])

def reset_grid(grid, visited):
    for row, col in visited:
        if is_valid(grid, row, col):
            grid[row][col] = 1

def is_isolated(grid, row, col):
    return all(grid[r][c] == 0 for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)] for r, c in [(row + dr, col + dc)] if is_valid(grid, r, c))

def copy_grid(grid):
    return [row[:] for row in grid]

def flood_fill(grid, row, col, target, replacement):
    if not is_valid(grid, row, col) or grid[row][col] != target:
        return
    grid[row][col] = replacement
    for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
        flood_fill(grid, row + dr, col + dc, target, replacement)

def find_land(grid):
    return next(((r, c) for r, row in enumerate(grid) for c, val in enumerate(row) if val == 1), None)

def perimeter(grid, row, col):
    if not is_valid(grid, row, col) or grid[row][col] == 0:
        return 0
    mark = 'v'
    grid[row][col] = mark
    perim = 4
    for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
        nr, nc = row + dr, col + dc
        if is_valid(grid, nr, nc) and grid[nr][nc] == 1:
            perim -= 1
            perim += perimeter(grid, nr, nc)
    return perim

def replace(grid, target, replacement):
    for row in range(len(grid)):
        for col in range(len(grid[0])):
            if grid[row][col] == target:
                grid[row][col] = replacement

----------Instruction 1--------------

Fill in count_islands() to count islands in a grid. Islands are groups of 1s surrounded by 0s. Use the helpers provided.

----------Instruction 2--------------

Write the count_islands() function to calculate how many islands appear in a grid. Islands are made up of connected 1s (land) and are surrounded by 0s (water). Use the given helper functions to aid in your task. Your function should return the count of these islands.

----------Instruction 3--------------

You're tasked to implement the count_islands() function. This function should scan a 2D grid map composed of '1's (land) and '0's (water), identifying and counting contiguous land masses. Islands connect vertically and horizontally, not diagonally. Leverage the adjacent utility functions for traversing and marking the grid. Your goal is to accurately return the total number of islands detected in the provided grid space.

----------Instruction 4--------------

Please implement the count_islands() function to count and return the number of distinct islands in a given 2D grid. An island is formed by connecting adjacent lands (1's) horizontally and vertically, not diagonally. Utilize the provided helper functions for grid exploration and manipulation.

----------Instruction 5--------------

Formulate the count_islands() algorithm to survey a matrix (grid of 1s and 0s, symbolizing land and water) and calculate the total enumeration of separate landmasses. Harness provided functions for complex grid traversal and ensure meticulous computation of these discrete terrestrial formations.

----------Test Cases---------------

test_cases = [
    # Test case 1: No land
    ([
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]
    ], 0),

    # Test case 2: One big island
    ([
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]
    ], 1),

    # Test case 3: One single land
    ([
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0]
    ], 1),

    # Test case 4: Two separate lands
    ([
        [1, 0, 0],
        [0, 0, 0],
        [0, 0, 1]
    ], 2),

    # Test case 5: A complex map
    ([
        [1, 1, 0, 0, 0],
        [0, 1, 0, 0, 1],
        [1, 0, 0, 1, 1],
        [0, 0, 0, 0, 0],
        [1, 0, 1, 0, 1]
    ], 5),

    # Test case 6: Single row
    ([
        [0, 1, 0, 1, 0, 1, 0]
    ], 3),

    # Test case 7: Single column
    ([
        [0],
        [1],
        [0],
        [1],
        [0],
        [1]
    ], 3),

    # Test case 8: Diagonals don't connect
    ([
        [1, 0, 0, 1],
        [0, 1, 1, 0],
        [0, 1, 1, 0],
        [1, 0, 0, 1]
    ], 3),

    # Test case 9: Water pools inside land
    ([
        [1, 1, 1, 1],
        [1, 0, 0, 1],
        [1, 0, 0, 1],
        [1, 1, 1, 1]
    ], 1),

    # Test case 10: Complex with varying island sizes
    ([
        [1, 0, 0, 1, 0],
        [0, 1, 0, 0, 1],
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0]
    ], 9),
]

# Function to run the test cases
def run_tests():
    for i, (grid, expected) in enumerate(test_cases, 1):
        result = count_islands(grid)
        assert result == expected, f"Test case {i} failed: expected {expected}, got {result}"
        print(f"Test case {i} passed.")

# Run the tests
run_tests()